{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"page1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"page1/#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3"},{"location":"page1/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"page2/","text":"parser/main.py \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 Celery \u0438 \u043e\u0434\u0438\u043d \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /celery-task \u0441 URL, \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 Celery \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u044d\u0442\u043e\u0433\u043e URL. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /celery-task-status/{task_id}. \u0414\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL \u043a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /parse \u0441 URL app = FastAPI() class URLRequest(BaseModel): url: HttpUrl @app.post(\"/celery-task\") async def celery_task_endpoint(request: URLRequest): try: print (request.url) task = celery_app.send_task('celery_app.parse_url_task', args=[str(request.url)]) return {\"task_id\": task.id, \"status\": \"Task has been submitted\"} except Exception as e: raise HTTPException(status_code=503, detail=str(e)) @app.get(\"/celery-task-status/{task_id}\") async def get_celery_task_status(task_id: str): task_result = AsyncResult(task_id) if task_result.state == 'FAILURE': return {\"task_id\": task_id, \"status\": task_result.state, \"error\": str(task_result.result)} return {\"task_id\": task_id, \"status\": task_result.state, \"result\": task_result.result} @app.post(\"/parse\") def parse(url: str, db: Session = Depends(get_session)): return parse_and_save(db=db, url=url)","title":"parser/main.py"},{"location":"page2/#parsermainpy","text":"","title":"parser/main.py"},{"location":"page2/#celery-url","text":"\u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /celery-task \u0441 URL, \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u0437\u0430\u0434\u0430\u0447\u0430 Celery \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u044d\u0442\u043e\u0433\u043e URL. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /celery-task-status/{task_id}. \u0414\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL \u043a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 /parse \u0441 URL app = FastAPI() class URLRequest(BaseModel): url: HttpUrl @app.post(\"/celery-task\") async def celery_task_endpoint(request: URLRequest): try: print (request.url) task = celery_app.send_task('celery_app.parse_url_task', args=[str(request.url)]) return {\"task_id\": task.id, \"status\": \"Task has been submitted\"} except Exception as e: raise HTTPException(status_code=503, detail=str(e)) @app.get(\"/celery-task-status/{task_id}\") async def get_celery_task_status(task_id: str): task_result = AsyncResult(task_id) if task_result.state == 'FAILURE': return {\"task_id\": task_id, \"status\": task_result.state, \"error\": str(task_result.result)} return {\"task_id\": task_id, \"status\": task_result.state, \"result\": task_result.result} @app.post(\"/parse\") def parse(url: str, db: Session = Depends(get_session)): return parse_and_save(db=db, url=url)","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0432\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0437\u0430\u0434\u0430\u0447\u0430\u043c\u0438 Celery \u0438 \u043e\u0434\u0438\u043d \u043c\u0430\u0440\u0448\u0440\u0443\u0442 \u0434\u043b\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 URL"},{"location":"page3/","text":"parser/celery_app.py \u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c Celery \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0443 parse_url_task, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u0442\u044c URL \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. celery_app = Celery( 'parser', broker='redis://redis:6379/0', backend='redis://redis:6379/0' ) celery_app.conf.update( task_serializer='json', accept_content=['json'], result_serializer='json', timezone='UTC', enable_utc=True, broker_connection_retry_on_startup=True ) @celery_app.task def parse_url_task(url): db = next(get_session()) parsed_data = parse_and_save(db, url) return parsed_data","title":"parser/celery_app.py"},{"location":"page3/#parsercelery_apppy","text":"","title":"parser/celery_app.py"},{"location":"page3/#celery-redis-parse_url_task-url","text":"celery_app = Celery( 'parser', broker='redis://redis:6379/0', backend='redis://redis:6379/0' ) celery_app.conf.update( task_serializer='json', accept_content=['json'], result_serializer='json', timezone='UTC', enable_utc=True, broker_connection_retry_on_startup=True ) @celery_app.task def parse_url_task(url): db = next(get_session()) parsed_data = parse_and_save(db, url) return parsed_data","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0438\u043c Celery \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f Redis \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0431\u0440\u043e\u043a\u0435\u0440\u0430 \u0438 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0443 parse_url_task, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043f\u0430\u0440\u0441\u0438\u0442\u044c URL \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445."},{"location":"page4/","text":"parser/Dockerfile \u0438 parser/Dockerfile.celery Dockerfile FROM python:3.12-slim WORKDIR /parser COPY requirements.txt . RUN mount=type=cache,target=/root/.cache pip3 install -r requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] Dockerfile.celery FROM python:3.12-slim WORKDIR /parser COPY requirements.txt . RUN pip3 install -r requirements.txt COPY . . ENTRYPOINT [\"celery\", \"-A\", \"celery_app\", \"worker\", \"--loglevel=info\"]","title":"parser/Dockerfile \u0438 parser/Dockerfile.celery"},{"location":"page4/#parserdockerfile-parserdockerfilecelery","text":"","title":"parser/Dockerfile \u0438 parser/Dockerfile.celery"},{"location":"page4/#dockerfile","text":"FROM python:3.12-slim WORKDIR /parser COPY requirements.txt . RUN mount=type=cache,target=/root/.cache pip3 install -r requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]","title":"Dockerfile"},{"location":"page4/#dockerfilecelery","text":"FROM python:3.12-slim WORKDIR /parser COPY requirements.txt . RUN pip3 install -r requirements.txt COPY . . ENTRYPOINT [\"celery\", \"-A\", \"celery_app\", \"worker\", \"--loglevel=info\"]","title":"Dockerfile.celery"},{"location":"page5/","text":"app/celery_client.py \u0438 app/Dockerfile \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f API - \u0434\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 URL \u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438. PARSER_SERVICE_URL = \"http://parser:8000/celery-task\" router = APIRouter() @router.post(\"/parse-url\") def parse_url(url: str): try: response = requests.post(PARSER_SERVICE_URL, json={\"url\": url}) response.raise_for_status() return response.json() except requests.exceptions.RequestException as e: raise HTTPException(status_code=505, detail=str(e)) @router.get(\"/task-status/{task_id}\") async def get_task_status(task_id: str): response = requests.get(f\"http://parser:8000/celery-task-status/{task_id}\") return response.json() Dockerfile \u0434\u043b\u044f app FROM python:3.12-slim WORKDIR /app COPY requirements.txt . RUN mount=type=cache,target=/root/.cache pip3 install -r requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]","title":"app/celery_client.py \u0438 app/Dockerfile"},{"location":"page5/#appcelery_clientpy-appdockerfile","text":"","title":"app/celery_client.py \u0438 app/Dockerfile"},{"location":"page5/#api-url","text":"PARSER_SERVICE_URL = \"http://parser:8000/celery-task\" router = APIRouter() @router.post(\"/parse-url\") def parse_url(url: str): try: response = requests.post(PARSER_SERVICE_URL, json={\"url\": url}) response.raise_for_status() return response.json() except requests.exceptions.RequestException as e: raise HTTPException(status_code=505, detail=str(e)) @router.get(\"/task-status/{task_id}\") async def get_task_status(task_id: str): response = requests.get(f\"http://parser:8000/celery-task-status/{task_id}\") return response.json()","title":"\u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438\u0437\u0430\u0446\u0438\u044e \u0434\u043b\u044f API - \u0434\u0432\u0430 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: \u043e\u0434\u0438\u043d \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 URL \u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u043d\u0433, \u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0437\u0430\u0434\u0430\u0447\u0438."},{"location":"page5/#dockerfile-app","text":"FROM python:3.12-slim WORKDIR /app COPY requirements.txt . RUN mount=type=cache,target=/root/.cache pip3 install -r requirements.txt COPY . . ENTRYPOINT [ \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]","title":"Dockerfile \u0434\u043b\u044f app"},{"location":"page6/","text":"docker-compose.yml version: '3.9' services: backend: build: context: ./app ports: - \"8080:8080\" environment: - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db - parser parser: build: context: ./parser dockerfile: Dockerfile environment: - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db ports: - \"8000:8000\" celery_worker: build: context: ./parser dockerfile: Dockerfile.celery environment: - CELERY_BROKER_URL=redis://redis:6379/0 - CELERY_RESULT_BACKEND=redis://redis:6379/0 - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db - redis db: image: postgres container_name: postgres_db volumes: - postgres_data:/var/lib/postgresql/data environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=12345 - POSTGRES_DB=appTime redis: image: redis:alpine container_name: redis volumes: postgres_data:","title":"docker-compose.yml"},{"location":"page6/#docker-composeyml","text":"version: '3.9' services: backend: build: context: ./app ports: - \"8080:8080\" environment: - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db - parser parser: build: context: ./parser dockerfile: Dockerfile environment: - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db ports: - \"8000:8000\" celery_worker: build: context: ./parser dockerfile: Dockerfile.celery environment: - CELERY_BROKER_URL=redis://redis:6379/0 - CELERY_RESULT_BACKEND=redis://redis:6379/0 - DATABASE_URL=postgresql://postgres:12345@db/appTime depends_on: - db - redis db: image: postgres container_name: postgres_db volumes: - postgres_data:/var/lib/postgresql/data environment: - POSTGRES_USER=postgres - POSTGRES_PASSWORD=12345 - POSTGRES_DB=appTime redis: image: redis:alpine container_name: redis volumes: postgres_data:","title":"docker-compose.yml"}]}